<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to ljs."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<meta name="dc:creator" content="ljs" />
<meta name="dc:title" content="How to Know a Person: The Art of Seeing Others Deeply and Being Deeply Seen" />



<title>
How to Know a Person: The Art of Seeing Others Deeply and Being Deeply Seen
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 7.0 Release 3 Build 0 */



/* CSS variables for colours. */
:root{
	--strFontFace:       Geneva,Arial,sans-serif;
	--strFontSize:       medium;
	--strTextColor:      #000000;
	--strTitleColor:     #000000;

	--strFuncLightColor: #ffffff;
	--strFuncShadeColor: #7f7f7f;
	--strLinkColor:      #0000FF;
	--strVLinkColor:     #0000CC;
	
	--strNavBarColor:    #000000;
	--strNavLightColor:  #7f7f7f;
	--strNavShadeColor:  #000000;
	--strNavTextColor:   #ffffff;
	
	--strPageBGColor:    #C0C0C0;
	--strExBGColor:      #FFFFFF;
}

body{
	font-family: var(--strFontFace);
	background-color: var(--strPageBGColor);
	color: var(--strTextColor);
 
	margin-right: 5%;
	margin-left: 5%;
	font-size: var(--strFontSize);
	padding-bottom: 0.5em;
}

p{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

table,div,span,td{
	font-size: 1em;
	color: var(--strTextColor);
}

div.Titles{
	padding: 0.5em;;
	text-align: center;
	color: var(--strTitleColor);
}

button{
	font-family: var(--strFontFace);
	font-size: 1em;
	display: inline;
}

.ExerciseTitle{
	font-size: 140%;
	color: var(--strTitleColor);
}

.ExerciseSubtitle{
	font-size: 120%;
	color: var(--strTitleColor);
}

div.StdDiv, div.ExerciseContainer, div.ReadingContainer{
	background-color: var(--strExBGColor);
	text-align: center;
	font-size: 1em;
	color: var(--strTextColor);
	padding: 0.5em;
	border-style: solid;
	border-width: 1px 1px 1px 1px;
	border-color: var(--strTextColor);
	margin-bottom: 1px;
}

div.ReadingContainer, div.ExerciseContainer{
	min-width: 15em;
	flex-grow: 1;
	flex-basis: 0;
	margin: 1px;
}

div#ContainerDiv{
	margin: -1px;
	padding: 0;
	border: none;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-between;
}

/* EndCorePageCSS */

.RTLText{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

.CentredRTLText{
	text-align: center;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

button p.RTLText{
	text-align: center;
}

.RTLGapBox{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Times New Roman", var(--strFontFace);
}

.Guess{
	font-weight: bold;
}

.CorrectAnswer{
	font-weight: bold;
}

div#Timer{
	padding: 0.25em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	color: var(--strTitleColor);
}

span#TimerText{
	padding: 0.25em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
	color: var(--strTitleColor);
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
	color: var(--strTitleColor);
}

.LeftItem{
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

.RightItem{
	font-weight: bold;
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

span.CorrectMark{

}

input, textarea{
	font-family: var(--strFontFace);
	font-size: 120%;
}

select{
	font-size: 1em;
}

div.Feedback {
	background-color: var(--strPageBGColor);
	left: 33%;
	width: 34%;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: var(--strTitleColor);
	position: absolute;
	display: none;
	font-size: 1em;
}




div.ExerciseDiv{
	color: var(--strTextColor);
}

/* JMatch standard output table. */
table.MatchTable{
	margin: 2em auto; 
	border-width: 0;
}

/* JMatch flashcard styles */
table.FlashcardTable{
	background-color: transparent;
	color: var(--strTextColor);
	border-color: var(--strTextColor);
	margin-left: auto;
	margin-right: auto;
	margin-top: 2em;
	margin-bottom: 2em;
	/*width: 90%;*/
	position: relative;
	text-align: center;
	padding: 0px;
}

table.FlashcardTable tr{
	border-style: none;
	margin: 0px;
	padding: 0px;
	background-color: var(--strExBGColor);
}

table.FlashcardTable td.Showing{
	font-size: 140%;
	text-align: center;
	width: 50%;
	display: table-cell;
	padding: 2em;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
	background-color: var(--strPageBGColor);
}

table.FlashcardTable td.Hidden{
	display: none;
}

/* JMix styles */
div.JMixDrag, div.JMatchDrag{
	padding: 0;
	background-color: var(--strPageBGColor);
	border-style: none;
}

div#GuessDiv{
	padding: 0.5em;
	margin-bottom: 2em;
}

div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: var(--strTextColor);
	display: inline-block;
	padding: 0.5em;
	border: solid 1pt gray;
	margin-bottom: 0.5em;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: left;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: var(--strTitleColor);
	width: 80%;
	left: 10%;
}

/* JCloze styles */

.ClozeWordList{
	text-align: center;
	font-weight: bold;
}

div.ClozeBody{
	text-align: left;
	margin-top: 2em;
	margin-bottom: 2em;
	line-height: 2.0
}

span.GapSpan{
	font-weight: bold;
}

/* JCross styles */

table.CrosswordGrid{
	margin: auto auto 1em auto;
	border-collapse: collapse;
	padding: 0px;
	background-color: #000000;
}

table.CrosswordGrid tbody tr td{
	width: 1.5em;
	height: 1.5em;
	text-align: center;
	vertical-align: middle;
	font-size: 140%;
	padding: 1px;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	color: #000000;
}

table.CrosswordGrid span{
	color: #000000;
}

table.CrosswordGrid td.BlankCell{
	background-color: #000000;
	color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell{
	text-align: center;
	vertical-align: middle;
	background-color: #ffffff;
	color: #000000;
	font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell{
	text-align: left;
	vertical-align: top;
	background-color: #ffffff;
	color: #000000;
	padding: 1px;
	font-weight: bold;
}

.NumLetterCellText{
	cursor: pointer;
	color: #000000;
}

.GridNum{
	vertical-align: super;
	font-size: 66%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

.GridNum:hover, .GridNum:visited{
	color: #000000;
}

table#Clues{
	margin: auto;
	vertical-align: top;
}

table#Clues td{
	vertical-align: top;
}

table.ClueList{
  margin: auto;
}

td.ClueNum{
	text-align: right;
	font-weight: bold;
	vertical-align: top;
}

td.Clue{
	text-align: left;
}

div#ClueEntry{
	text-align: left;
	margin-bottom: 1em;
}

/* Keypad styles */

div.Keypad{
	text-align: center;
	display: none; /* initially hidden, shown if needed */
	margin-bottom: 0.5em;
}

div.Keypad button{
	font-family: var(--strFontFace);
	font-size: 120%;
	background-color: #ffffff;
	color: #000000;
	width: 2em;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
}

/* JQuiz styles */

div.QuestionNavigation{
	text-align: center;
}

.QNum{
	margin: 0em 1em 0.5em 1em;
	font-weight: bold;
	vertical-align: middle;
}

textarea{
	font-family: var(--strFontFace);
}

.QuestionText{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

.Answer{
	font-size: 120%;
}

.PartialAnswer{
	font-size: 120%;
	letter-spacing: 0.1em;
	color: var(--strTitleColor);
}

.Highlight{
	color: #000000;
	background-color: #ffff00;
	font-weight: bold;
	font-size: 120%;
}

ol.QuizQuestions{
	text-align: left;
	list-style-type: none;
}

li.QuizQuestion{
	padding: 1em;
	border-style: solid;
	border-width: 0px 0px 1px 0px;
}

ol.MCAnswers{
	text-align: left;
	list-style-type: upper-alpha;
	padding: 1em;
}

ol.MCAnswers li{
	margin-bottom: 1em;
}

ol.MSelAnswers{
	text-align: left;
	list-style-type: lower-alpha;
	padding: 1em;
}

div.ShortAnswer{
	padding: 1em;
}

.FuncButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;

	border-left-color: var(--strFuncLightColor);
	border-top-color: var(--strFuncLightColor);
	border-right-color: var(--strFuncShadeColor);
	border-bottom-color: var(--strFuncShadeColor);
	color: var(--strTextColor);
	background-color: var(--strExBGColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
}

.FuncButton:active {
	box-shadow: none;
}

.FuncButton:hover{
	color: var(--strExBGColor);
	background-color: var(--strTextColor);
}

/*BeginNavBarStyle*/

div.NavButtonBar{
	background-color: var(--strNavBarColor);
	text-align: center;
	margin: 0.25rem 0;
	clear: both;
	font-size: 1em;
	padding: 0.2em;
	box-sizing: border-box;
}

.NavButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;
	
	border-left-color: var(--strNavLightColor);
	border-top-color: var(--strNavLightColor);
	border-right-color: var(--strNavShadeColor);
	border-bottom-color: var(--strNavShadeColor); 
	background-color: var(--strNavBarColor);
	color: var(--strNavTextColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
}

.NavButton:active {
	box-shadow: none;
}

.NavButton:hover{
	color: var(--strNavBarColor);
	background-color: var(--strNavTextColor);
}

/*EndNavBarStyle*/

a{
	color: var(--strLinkColor);
}

a:visited{
	color: var(--strVLinkColor);
}

a:hover{
	color: var(--strLinkColor);
}

div.CardStyle {
	position: absolute;
	font-family: var(--strFontFace);
	font-size: 1em;
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 2em;
	border-width: 1pt;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
	background-color: var(--strExBGColor);
	left: -50px;
	top: -50px;
	overflow: visible;
	touch-action: none;
	user-select: none;
	box-sizing: border-box;
}

div.CardStyleCentered{
	text-align: center;
}

.rtl{
	text-align: right;
	font-size: 140%;
}


</style>

<script>

//<![CDATA[

<!--




//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].offsetWidth;
	this.H = document.getElementsByTagName('body')[0].offsetHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	thisKey = e.keyCode;

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
		e.preventDefault();
	}
}

window.addEventListener('keypress',SuppressBackspace,false);

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//SELECTION OBJECT FOR TYPING WITH KEYPAD
var selObj = null;
            
SelObj = function(box){
	this.box = box;
	this.selStart = this.box.selectionStart;
	this.selEnd = this.box.selectionEnd;
	this.selText = this.box.value.substring(this.selStart, this.selEnd);
	return this;
}

function setSelText(newText){
	var caretPos = this.selStart + newText.length;
	var newValue = this.box.value.substring(0, this.selStart);
	newValue += newText;
	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
	this.box.value = newValue;
	this.box.setSelectionRange(caretPos, caretPos);
	this.box.focus();
}
SelObj.prototype.setSelText = setSelText;

function setSelSelectionRange(start, end){
	this.box.setSelectionRange(start, end);
}
SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}







//JCLOZE CORE JAVASCRIPT CODE

function ItemState(){
	this.ClueGiven = false;
	this.HintsAndChecks = 0;
	this.MatchedAnswerLength = 0;
	this.ItemScore = 0;
	this.AnsweredCorrectly = false;
	this.Guesses = new Array();
	return this;
}

var Feedback = '';
var Correct = 'Correct! Well done.';
var Incorrect = 'Some of your answers are incorrect. Incorrect answers have been left in place for you to change.'; 
var GiveHint = 'The next correct letter has been added to the answer.';
var CaseSensitive = false;
var YourScoreIs = 'Your score is ';
var Finished = false;
var Locked = false;
var Score = 0;
var CurrentWord = 0;
var Guesses = '';
var TimeOver = false;

I = new Array();

I[0] = new Array();
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0] = '\u0063\u006F\u006E\u006E\u0065\u0063\u0074\u0069\u006F\u006E';
I[0][2]='';

I[1] = new Array();
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0] = '\u0077\u0065';
I[1][2]='';

I[2] = new Array();
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0] = '\u0066\u0072\u0069\u0065\u006E\u0064\u0073\u0068\u0069\u0070';
I[2][2]='';

I[3] = new Array();
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0] = '\u0073\u0069\u0074';
I[3][2]='';

I[4] = new Array();
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0] = '\u0074\u0061\u0075\u0067\u0068\u0074';
I[4][2]='';

I[5] = new Array();
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0] = '\u0046\u006F\u0072\u0074\u0075\u006E\u0061\u0074\u0065\u006C\u0079';
I[5][2]='';

I[6] = new Array();
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0] = '\u0074\u0072\u0065\u0061\u0074';
I[6][2]='';

I[7] = new Array();
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0] = '\u0069\u0064\u0065\u0061';
I[7][2]='';

I[8] = new Array();
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0] = '\u0074\u006F';
I[8][2]='';

I[9] = new Array();
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0] = '\u0075\u0070\u006F\u006E';
I[9][2]='';

I[10] = new Array();
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0] = '\u0067\u0069\u0066\u0074\u0073';
I[10][2]='';

I[11] = new Array();
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0] = '\u0077\u0069\u0074\u0068\u0069\u006E';
I[11][2]='';

I[12] = new Array();
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0] = '\u0072\u0069\u0067\u0068\u0074';
I[12][2]='';

I[13] = new Array();
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0] = '\u0074\u006F';
I[13][2]='';

I[14] = new Array();
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0] = '\u0074\u006F';
I[14][2]='';

I[15] = new Array();
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0] = '\u0061\u0062\u006C\u0065';
I[15][2]='';

I[16] = new Array();
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0] = '\u0073\u006F\u0063\u0069\u0065\u0074\u0069\u0065\u0073';
I[16][2]='';

I[17] = new Array();
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0] = '\u0062\u0065';
I[17][2]='';

I[18] = new Array();
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0] = '\u0074\u0068\u0065';
I[18][2]='';

I[19] = new Array();
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0] = '\u0052\u0065\u0070\u0061\u0069\u0072\u0069\u006E\u0067';
I[19][2]='';

I[20] = new Array();
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0] = '\u004F\u006E\u006C\u0079';
I[20][2]='';

I[21] = new Array();
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0] = '\u0066\u0061\u0062\u0072\u0069\u0063';
I[21][2]='';

I[22] = new Array();
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0] = '\u006A\u0075\u0073\u0074';
I[22][2]='';

I[23] = new Array();
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0] = '\u006F\u006E\u0065';
I[23][2]='';

I[24] = new Array();
I[24][1] = new Array();
I[24][1][0] = new Array();
I[24][1][0][0] = '\u0073\u006D\u0061\u006C\u006C';
I[24][2]='';

I[25] = new Array();
I[25][1] = new Array();
I[25][1][0] = new Array();
I[25][1][0][0] = '\u0069\u006C\u006C\u0075\u006D\u0069\u006E\u0061\u0074\u006F\u0072\u0073';
I[25][2]='';

I[26] = new Array();
I[26][1] = new Array();
I[26][1][0] = new Array();
I[26][1][0][0] = '\u0061\u006E\u0064';
I[26][2]='';

I[27] = new Array();
I[27][1] = new Array();
I[27][1][0] = new Array();
I[27][1][0][0] = '\u0063\u006F\u006D\u0065\u0073';
I[27][2]='';

I[28] = new Array();
I[28][1] = new Array();
I[28][1][0] = new Array();
I[28][1][0][0] = '\u006D\u006F\u0072\u0065';
I[28][2]='';

I[29] = new Array();
I[29][1] = new Array();
I[29][1][0] = new Array();
I[29][1][0][0] = '\u0069\u0074';
I[29][2]='';

I[30] = new Array();
I[30][1] = new Array();
I[30][1][0] = new Array();
I[30][1][0][0] = '\u0061\u0062\u006C\u0065';
I[30][2]='';

I[31] = new Array();
I[31][1] = new Array();
I[31][1][0] = new Array();
I[31][1][0][0] = '\u006F\u0076\u0065\u0072\u006C\u0079';
I[31][2]='';

I[32] = new Array();
I[32][1] = new Array();
I[32][1][0] = new Array();
I[32][1][0][0] = '\u0077\u0065';
I[32][2]='';

I[33] = new Array();
I[33][1] = new Array();
I[33][1][0] = new Array();
I[33][1][0][0] = '\u0069\u006C\u006C\u0075\u006D\u0069\u006E\u0061\u0074\u0069\u006F\u006E';
I[33][2]='';

I[34] = new Array();
I[34][1] = new Array();
I[34][1][0] = new Array();
I[34][1][0][0] = '\u0069\u0074';
I[34][2]='';

I[35] = new Array();
I[35][1] = new Array();
I[35][1][0] = new Array();
I[35][1][0][0] = '\u0049\u0066';
I[35][2]='';

I[36] = new Array();
I[36][1] = new Array();
I[36][1][0] = new Array();
I[36][1][0][0] = '\u0077\u0069\u0074\u0068';
I[36][2]='';

I[37] = new Array();
I[37][1] = new Array();
I[37][1][0] = new Array();
I[37][1][0][0] = '\u0070\u0065\u0072\u0073\u006F\u006E';
I[37][2]='';

I[38] = new Array();
I[38][1] = new Array();
I[38][1][0] = new Array();
I[38][1][0][0] = '\u0065\u0078\u0074\u0072\u0061\u006F\u0072\u0064\u0069\u006E\u0061\u0072\u0079';
I[38][2]='';

I[39] = new Array();
I[39][1] = new Array();
I[39][1][0] = new Array();
I[39][1][0][0] = '\u0074\u0068\u0065';
I[39][2]='';

I[40] = new Array();
I[40][1] = new Array();
I[40][1][0] = new Array();
I[40][1][0][0] = '\u0066\u006F\u0072\u0067\u006F\u0074\u0074\u0065\u006E';
I[40][2]='';

I[41] = new Array();
I[41][1] = new Array();
I[41][1][0] = new Array();
I[41][1][0][0] = '\u0070\u0065\u0072\u0063\u0065\u006E\u0074';
I[41][2]='';

I[42] = new Array();
I[42][1] = new Array();
I[42][1][0] = new Array();
I[42][1][0][0] = '\u006F\u0066';
I[42][2]='';

I[43] = new Array();
I[43][1] = new Array();
I[43][1][0] = new Array();
I[43][1][0][0] = '\u0070\u0065\u006F\u0070\u006C\u0065';
I[43][2]='';

I[44] = new Array();
I[44][1] = new Array();
I[44][1][0] = new Array();
I[44][1][0][0] = '\u0072\u0065\u0061\u006C';
I[44][2]='';

I[45] = new Array();
I[45][1] = new Array();
I[45][1][0] = new Array();
I[45][1][0][0] = '\u0074\u0068\u0065';
I[45][2]='';

I[46] = new Array();
I[46][1] = new Array();
I[46][1][0] = new Array();
I[46][1][0][0] = '\u0070\u006C\u0061\u0063\u0065';
I[46][2]='';

I[47] = new Array();
I[47][1] = new Array();
I[47][1][0] = new Array();
I[47][1][0][0] = '\u0079\u006F\u0075\u0072\u0073\u0065\u006C\u0066';
I[47][2]='';

I[48] = new Array();
I[48][1] = new Array();
I[48][1][0] = new Array();
I[48][1][0][0] = '\u0074\u0068\u0065';
I[48][2]='';

I[49] = new Array();
I[49][1] = new Array();
I[49][1][0] = new Array();
I[49][1][0][0] = '\u0062\u0065';
I[49][2]='';

I[50] = new Array();
I[50][1] = new Array();
I[50][1][0] = new Array();
I[50][1][0][0] = '\u0064\u0065\u0066\u0065\u006E\u0073\u0069\u0076\u0065';
I[50][2]='';

I[51] = new Array();
I[51][1] = new Array();
I[51][1][0] = new Array();
I[51][1][0][0] = '\u0061\u006E\u0064';
I[51][2]='';

I[52] = new Array();
I[52][1] = new Array();
I[52][1][0] = new Array();
I[52][1][0][0] = '\u0063\u006F\u006E\u0076\u0065\u0072\u0073\u0061\u0074\u0069\u006F\u006E';
I[52][2]='';

I[53] = new Array();
I[53][1] = new Array();
I[53][1][0] = new Array();
I[53][1][0][0] = '\u0077\u0068\u0079';
I[53][2]='';

I[54] = new Array();
I[54][1] = new Array();
I[54][1][0] = new Array();
I[54][1][0][0] = '\u0072\u0065\u0061\u006C\u006C\u0079';
I[54][2]='';

I[55] = new Array();
I[55][1] = new Array();
I[55][1][0] = new Array();
I[55][1][0][0] = '\u0073\u006B\u0069\u006C\u006C';
I[55][2]='';

I[56] = new Array();
I[56][1] = new Array();
I[56][1][0] = new Array();
I[56][1][0][0] = '\u006F\u0074\u0068\u0065\u0072';
I[56][2]='';

I[57] = new Array();
I[57][1] = new Array();
I[57][1][0] = new Array();
I[57][1][0][0] = '\u006C\u0065\u0073\u0073';
I[57][2]='';

I[58] = new Array();
I[58][1] = new Array();
I[58][1][0] = new Array();
I[58][1][0][0] = '\u006F\u0066';
I[58][2]='';

I[59] = new Array();
I[59][1] = new Array();
I[59][1][0] = new Array();
I[59][1][0][0] = '\u0067\u0072\u0061\u0064\u0065';
I[59][2]='';

I[60] = new Array();
I[60][1] = new Array();
I[60][1][0] = new Array();
I[60][1][0][0] = '\u0061\u0073';
I[60][2]='';

I[61] = new Array();
I[61][1] = new Array();
I[61][1][0] = new Array();
I[61][1][0][0] = '\u0064\u0072\u0069\u006E\u006B\u0073';
I[61][2]='';

I[62] = new Array();
I[62][1] = new Array();
I[62][1][0] = new Array();
I[62][1][0][0] = '\u0063\u0069\u0072\u0063\u0075\u006D\u0073\u0074\u0061\u006E\u0063\u0065\u0073';
I[62][2]='';

I[63] = new Array();
I[63][1] = new Array();
I[63][1][0] = new Array();
I[63][1][0][0] = '\u0063\u0075\u006C\u0074\u0075\u0072\u0065\u0073';
I[63][2]='';

I[64] = new Array();
I[64][1] = new Array();
I[64][1][0] = new Array();
I[64][1][0][0] = '\u0079\u006F\u0075';
I[64][2]='';

I[65] = new Array();
I[65][1] = new Array();
I[65][1][0] = new Array();
I[65][1][0][0] = '\u0074\u0068\u0065\u0079';
I[65][2]='';

I[66] = new Array();
I[66][1] = new Array();
I[66][1][0] = new Array();
I[66][1][0][0] = '\u0073\u0068\u006F\u0077';
I[66][2]='';

I[67] = new Array();
I[67][1] = new Array();
I[67][1][0] = new Array();
I[67][1][0][0] = '\u006F\u0066';
I[67][2]='';

I[68] = new Array();
I[68][1] = new Array();
I[68][1][0] = new Array();
I[68][1][0][0] = '\u0061\u0062\u006F\u0075\u0074';
I[68][2]='';

I[69] = new Array();
I[69][1] = new Array();
I[69][1][0] = new Array();
I[69][1][0][0] = '\u0048\u006F\u0077\u0065\u0076\u0065\u0072';
I[69][2]='';

I[70] = new Array();
I[70][1] = new Array();
I[70][1][0] = new Array();
I[70][1][0][0] = '\u006E\u0065\u0065\u0064';
I[70][2]='';

I[71] = new Array();
I[71][1] = new Array();
I[71][1][0] = new Array();
I[71][1][0][0] = '\u0063\u0075\u006C\u0074\u0075\u0072\u0065';
I[71][2]='';

I[72] = new Array();
I[72][1] = new Array();
I[72][1][0] = new Array();
I[72][1][0][0] = '\u0073\u0075\u0066\u0066\u0065\u0072\u0069\u006E\u0067';
I[72][2]='';

I[73] = new Array();
I[73][1] = new Array();
I[73][1][0] = new Array();
I[73][1][0][0] = '\u0072\u0065\u0077\u0061\u0072\u0064\u0069\u006E\u0067';
I[73][2]='';

I[74] = new Array();
I[74][1] = new Array();
I[74][1][0] = new Array();
I[74][1][0][0] = '\u0059\u0065\u0074';
I[74][2]='';

I[75] = new Array();
I[75][1] = new Array();
I[75][1][0] = new Array();
I[75][1][0][0] = '\u006C\u0065\u0073\u0073\u006F\u006E\u0073';
I[75][2]='';

I[76] = new Array();
I[76][1] = new Array();
I[76][1][0] = new Array();
I[76][1][0][0] = '\u006D\u0065\u0061\u006E\u0073';
I[76][2]='';

I[77] = new Array();
I[77][1] = new Array();
I[77][1][0] = new Array();
I[77][1][0][0] = '\u0079\u006F\u0075';
I[77][2]='';

I[78] = new Array();
I[78][1] = new Array();
I[78][1][0] = new Array();
I[78][1][0][0] = '\u0069\u006E';
I[78][2]='';

I[79] = new Array();
I[79][1] = new Array();
I[79][1][0] = new Array();
I[79][1][0][0] = '\u0070\u0061\u0072\u0074';
I[79][2]='';

I[80] = new Array();
I[80][1] = new Array();
I[80][1][0] = new Array();
I[80][1][0][0] = '\u0074\u0068\u0061\u0074';
I[80][2]='';

I[81] = new Array();
I[81][1] = new Array();
I[81][1][0] = new Array();
I[81][1][0][0] = '\u0046\u006F\u0072';
I[81][2]='';

I[82] = new Array();
I[82][1] = new Array();
I[82][1][0] = new Array();
I[82][1][0][0] = '\u0066\u0069\u0072\u0073\u0074';
I[82][2]='';

I[83] = new Array();
I[83][1] = new Array();
I[83][1][0] = new Array();
I[83][1][0][0] = '\u0061\u0072\u006F\u0075\u006E\u0064';
I[83][2]='';

I[84] = new Array();
I[84][1] = new Array();
I[84][1][0] = new Array();
I[84][1][0][0] = '\u0079\u006F\u0075\u0072';
I[84][2]='';

I[85] = new Array();
I[85][1] = new Array();
I[85][1][0] = new Array();
I[85][1][0][0] = '\u0074\u0068\u0065';
I[85][2]='';

I[86] = new Array();
I[86][1] = new Array();
I[86][1][0] = new Array();
I[86][1][0][0] = '\u0042\u0075\u0074';
I[86][2]='';

I[87] = new Array();
I[87][1] = new Array();
I[87][1][0] = new Array();
I[87][1][0][0] = '\u0062\u0072\u0065\u0061\u0074\u0068\u0069\u006E\u0067';
I[87][2]='';

I[88] = new Array();
I[88][1] = new Array();
I[88][1][0] = new Array();
I[88][1][0][0] = '\u0054\u006F\u006F';
I[88][2]='';

I[89] = new Array();
I[89][1] = new Array();
I[89][1][0] = new Array();
I[89][1][0][0] = '\u0074\u0068\u0065';
I[89][2]='';

I[90] = new Array();
I[90][1] = new Array();
I[90][1][0] = new Array();
I[90][1][0][0] = '\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073';
I[90][2]='';

I[91] = new Array();
I[91][1] = new Array();
I[91][1][0] = new Array();
I[91][1][0][0] = '\u0077\u0065\u006C\u006C';
I[91][2]='';

I[92] = new Array();
I[92][1] = new Array();
I[92][1][0] = new Array();
I[92][1][0][0] = '\u0074\u0061\u006B\u0065';
I[92][2]='';

I[93] = new Array();
I[93][1] = new Array();
I[93][1][0] = new Array();
I[93][1][0][0] = '\u006F\u0070\u0070\u006F\u0072\u0074\u0075\u006E\u0069\u0074\u0079';
I[93][2]='';


State = new Array();

function StartUp(){
//Show a keypad if there is one	(added bugfix for 6.0.4.12)
	if (document.getElementById('CharacterKeypad') != null){
		document.getElementById('CharacterKeypad').style.display = 'block';
	}
	






	var i = 0;

	State.length = 0;
	for (i=0; i<I.length; i++){
		State[i] = new ItemState();
	}
	
	ClearTextBoxes();
	


}

function ShowClue(ItemNum){
	if (Locked == true){return;}
	State[ItemNum].ClueGiven = true;
	ShowMessage(I[ItemNum][2]);
}

function SaveCurrentAnswers(){
	var Ans = '';
	for (var i=0; i<I.length; i++){
		Ans = GetGapValue(i);
		if ((Ans.length > 0)&&(Ans != State[i].Guesses[State[i].Guesses.length-1])){
			State[i].Guesses[State[i].Guesses.length] = Ans;
		}
	}
}

function CompileGuesses(){
	var F = document.getElementById('store');
	if (F != null){
		var Temp = '<?xml version="1.0"?><hpnetresult><fields>';
		var GapLabel = '';
		for (var i=0; i<State.length; i++){
			GapLabel = 'Gap ' + (i+1).toString();
			Temp += '<field><fieldname>' + GapLabel + '</fieldname>';
			Temp += '<fieldtype>student-responses</fieldtype><fieldlabel>' + GapLabel + '</fieldlabel>';
			Temp += '<fieldlabelid>JClozeStudentResponses</fieldlabelid><fielddata>';
			for (var j=0; j<State[i].Guesses.length; j++){
				if (j>0){Temp += '| ';}
				Temp += State[i].Guesses[j] + ' ';	
			}	
  		Temp += '</fielddata></field>';
		}
		Temp += '</fields></hpnetresult>';
		Detail = Temp;
	}
}

function CheckAnswers(){
	if (Locked == true){return;}
	SaveCurrentAnswers();
	var AllCorrect = true;

//Check each answer
	for (var i = 0; i<I.length; i++){

		if (State[i].AnsweredCorrectly == false){
//If it's right, calculate its score
			if (CheckAnswer(i, true) > -1){
				var TotalChars = GetGapValue(i).length;
				State[i].ItemScore = (TotalChars-State[i].HintsAndChecks)/TotalChars;
				if (State[i].ClueGiven == true){State[i].ItemScore /= 2;}
				if (State[i].ItemScore <0 ){State[i].ItemScore = 0;}
				State[i].AnsweredCorrectly = true;
//Drop the correct answer into the page, replacing the text box
				SetCorrectAnswer(i, GetGapValue(i));
			}
			else{
//Otherwise, increment the hints for this item, as a penalty
				State[i].HintsAndChecks++;

//then set the flag
				AllCorrect = false;
			}
		}
	}

//Calculate the total score
	var TotalScore = 0;
	for (i=0; i<State.length; i++){
		TotalScore += State[i].ItemScore;
	}
	TotalScore = Math.floor((TotalScore * 100)/I.length);

//Compile the output
	Output = '';

	if (AllCorrect == true){
		Output = Correct + '<br />';
	}

	Output += YourScoreIs + ' ' + TotalScore + '%.<br />';
	if (AllCorrect == false){
		Output += Incorrect;
	}
	ShowMessage(Output);
	setTimeout('WriteToInstructions(Output)', 50);
	
	Score = TotalScore;
	CompileGuesses();
	
	if ((AllCorrect == true)||(Finished == true)){
	


		TimeOver = true;
		Locked = true;
		Finished = true;
	}

}

function TrackFocus(BoxNumber){
	CurrentWord = BoxNumber;
	InTextBox = true;
}

function LeaveGap(){
	InTextBox = false;
}

function CheckBeginning(Guess, Answer){
	var OutString = '';
	var i = 0;
	var UpperGuess = '';
	var UpperAnswer = '';

	if (CaseSensitive == false) {
		UpperGuess = Guess.toUpperCase();
		UpperAnswer = Answer.toUpperCase();
	}
	else {
		UpperGuess = Guess;
		UpperAnswer = Answer;
	}

	while (UpperGuess.charAt(i) == UpperAnswer.charAt(i)) {
		OutString += Guess.charAt(i);
		i++;
	}
	OutString += Answer.charAt(i);
	return OutString;
}

function GetGapValue(GNum){
	var RetVal = '';
	if ((GNum<0)||(GNum>=I.length)){return RetVal;}
	if (document.getElementById('Gap' + GNum) != null){
		RetVal = document.getElementById('Gap' + GNum).value;
		RetVal = TrimString(RetVal);
	}
	else{
		RetVal = State[GNum].Guesses[State[GNum].Guesses.length-1];
	}
	return RetVal;
}

function SetGapValue(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (document.getElementById('Gap' + GNum) != null){
		document.getElementById('Gap' + GNum).value = Val;
		document.getElementById('Gap' + GNum).focus();
	}
}

function SetCorrectAnswer(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (document.getElementById('GapSpan' + GNum) != null){
		document.getElementById('GapSpan' + GNum).innerHTML = Val;
	}
}

function FindCurrent() {
	var x = 0;
	FoundCurrent = -1;

//Test the current word:
//If its state is not set to already correct, check the word.
	if (State[CurrentWord].AnsweredCorrectly == false){
		if (CheckAnswer(CurrentWord, false) < 0){
			return CurrentWord;
		}
	}
	
	x=CurrentWord + 1;
	while (x<I.length){
		if (State[x].AnsweredCorrectly == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}

	x = 0;
	while (x<CurrentWord){
		if (State[x].AnsweredCorrectly == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}
	return FoundCurrent;
}

function CheckAnswer(GapNum, MarkAnswer){
	var Guess = GetGapValue(GapNum);
	var UpperGuess = '';
	var UpperAnswer = '';
	if (CaseSensitive == false){
		UpperGuess = Guess.toUpperCase();
	}
	else{
		UpperGuess = Guess;
	}
	var Match = -1;
	for (var i = 0; i<I[GapNum][1].length; i++){
		if (CaseSensitive == false){
			UpperAnswer = I[GapNum][1][i][0].toUpperCase();
		}
		else{
			UpperAnswer = I[GapNum][1][i][0];
		}
		if (TrimString(UpperGuess) == UpperAnswer){
			Match = i;
			if (MarkAnswer == true){
				State[GapNum].AnsweredCorrectly = true;
			}
		}
	}
	return Match;
}

function GetHint(GapNum){
	Guess = GetGapValue(GapNum);

	if (CheckAnswer(GapNum, false) > -1){return ''}
	RightBits = new Array();
	for (var i=0; i<I[GapNum][1].length; i++){
		RightBits[i] = CheckBeginning(Guess, I[GapNum][1][i][0]);
	}
	var RightOne = FindLongest(RightBits);
	var Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length);
//Add another char if the last one is a space
	if (Result.charAt(Result.length-1) == ' '){
		Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length+1);
	}
	return Result;
}

function ShowHint(){
	if (document.getElementById('FeedbackDiv').style.display == 'block'){return;}
	if (Locked == true){return;}
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}

	var HintString = GetHint(CurrGap);

	if (HintString.length > 0){
		SetGapValue(CurrGap, HintString);
		State[CurrGap].HintsAndChecks += 1;
	}
	ShowMessage(GiveHint);
}

function TypeChars(Chars){
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}
	var box = document.getElementById('Gap' + CurrGap);

	if (box != null){
		var selObj = SelObj(box);
		selObj.setSelText(Chars);
	}
}








//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">




<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">How to Know a Person: The Art of Seeing Others Deeply and Being Deeply Seen</h2>

	<h3 class="ExerciseSubtitle">Gap-fill exercise</h3>

<div id="player">
<iframe src="https://podcasters.spotify.com/pod/show/fluent-english/embed/episodes/Fluent-English---How-to-Know-a-person---Jan-07-2024-e2e41fo/a-aaqkuss" height="102px" width="400px" frameborder="0" scrolling="no"></iframe>
</div>

</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions">Fill in all the gaps, then press "Check" to check your answers. Use the "Hint" button to get a free letter if an answer is giving you trouble. You can also click on the "[?]" button to get a clue. Note that you will lose points if you ask for hints or clues!
</div>
</div>


<div id="ContainerDiv">



<div class="ExerciseContainer">






<!-- These top buttons hidden; reveal if required -->
<!--
<button id="CheckButton1" class="FuncButton" onclick="CheckAnswers()">&#160;Check&#160;</button>


<button class="FuncButton" onclick="ShowHint()">&#160;Hint&#160;</button>


 -->
 
<div id="ClozeDiv">
<form id="Cloze" method="post" autocomplete="off" onsubmit="return false;">
<div class="ClozeBody">
Introduction<br />What&#x2019;s in it for me? Foster deeper, truer connections with the people in your life.<br />These days, &#x201C;relationships,&#x201D; &#x201C;community,&#x201D; and &#x201C;social <span class="GapSpan" id="GapSpan0"><input type="text" autocomplete="off" id="Gap0" onfocus="TrackFocus(0)" onblur="LeaveGap()" class="GapBox" size="10"/></span>&#x201D; are all hot topics. We acknowledge that loneliness kills &#x2013; and stress the importance of building friendships and creating community. <br />But do <span class="GapSpan" id="GapSpan1"><input type="text" autocomplete="off" id="Gap1" onfocus="TrackFocus(1)" onblur="LeaveGap()" class="GapBox" size="6"/></span> really know what we&#x2019;re talking about when we use these words? Do we know how to ask the questions that deepen a <span class="GapSpan" id="GapSpan2"><input type="text" autocomplete="off" id="Gap2" onfocus="TrackFocus(2)" onblur="LeaveGap()" class="GapBox" size="10"/></span>? Can we set aside our own beliefs in order to hear and understand those of another person? And are we able to <span class="GapSpan" id="GapSpan3"><input type="text" autocomplete="off" id="Gap3" onfocus="TrackFocus(3)" onblur="LeaveGap()" class="GapBox" size="6"/></span> with someone who&#x2019;s suffering, even if it makes us uncomfortable?<br />These skills are incredibly important in daily life, and yet they aren&#x2019;t <span class="GapSpan" id="GapSpan4"><input type="text" autocomplete="off" id="Gap4" onfocus="TrackFocus(4)" onblur="LeaveGap()" class="GapBox" size="6"/></span> in school. As a result, loneliness has become a common illness, and we find ourselves lacking the deep friendships we so crave. <br /><span class="GapSpan" id="GapSpan5"><input type="text" autocomplete="off" id="Gap5" onfocus="TrackFocus(5)" onblur="LeaveGap()" class="GapBox" size="11"/></span>, the ability to see others &#x2013; and make them feel seen &#x2013; is a skill you can cultivate. You can learn to <span class="GapSpan" id="GapSpan6"><input type="text" autocomplete="off" id="Gap6" onfocus="TrackFocus(6)" onblur="LeaveGap()" class="GapBox" size="6"/></span> people with consideration, to understand those around you, and care for your loved ones better. This Blink will show you how.<br />Key <span class="GapSpan" id="GapSpan7"><input type="text" autocomplete="off" id="Gap7" onfocus="TrackFocus(7)" onblur="LeaveGap()" class="GapBox" size="6"/></span> 1<br />Seeing and being seen<br />The Irish playwright George Bernard Shaw once wrote, &#x201C;The worst sin towards our fellow creatures is not <span class="GapSpan" id="GapSpan8"><input type="text" autocomplete="off" id="Gap8" onfocus="TrackFocus(8)" onblur="LeaveGap()" class="GapBox" size="6"/></span> hate them, but to be indifferent to them: that&#x2019;s the essence of inhumanity.&#x201D; In other words, the cruelest punishment you can inflict <span class="GapSpan" id="GapSpan9"><input type="text" autocomplete="off" id="Gap9" onfocus="TrackFocus(9)" onblur="LeaveGap()" class="GapBox" size="6"/></span> another person is to treat them as if they don&#x2019;t matter &#x2013; or don&#x2019;t exist.<br />On the flipside, one of the greatest <span class="GapSpan" id="GapSpan10"><input type="text" autocomplete="off" id="Gap10" onfocus="TrackFocus(10)" onblur="LeaveGap()" class="GapBox" size="6"/></span> you can give to others is seeing and understanding them. It can be life-altering to hear someone see and praise a talent <span class="GapSpan" id="GapSpan11"><input type="text" autocomplete="off" id="Gap11" onfocus="TrackFocus(11)" onblur="LeaveGap()" class="GapBox" size="6"/></span> you that you may not even be aware of yourself. Or for someone to understand exactly what you need at exactly the <span class="GapSpan" id="GapSpan12"><input type="text" autocomplete="off" id="Gap12" onfocus="TrackFocus(12)" onblur="LeaveGap()" class="GapBox" size="6"/></span> moment, and give it to you with warmth and affection.<br />Aside from the sense of fulfillment it brings, there are many reasons <span class="GapSpan" id="GapSpan13"><input type="text" autocomplete="off" id="Gap13" onfocus="TrackFocus(13)" onblur="LeaveGap()" class="GapBox" size="6"/></span> cultivate the skill of seeing others. First and foremost, a lot of your most important life decisions depend on it. You need <span class="GapSpan" id="GapSpan14"><input type="text" autocomplete="off" id="Gap14" onfocus="TrackFocus(14)" onblur="LeaveGap()" class="GapBox" size="6"/></span> be able to see your potential spouse beyond their looks and career prospects, and understand if you&#x2019;re compatible; you need to be <span class="GapSpan" id="GapSpan15"><input type="text" autocomplete="off" id="Gap15" onfocus="TrackFocus(15)" onblur="LeaveGap()" class="GapBox" size="6"/></span> to see whether a potential hire or roommate will remain calm in a crisis and be generous to others. <br />More than that, <span class="GapSpan" id="GapSpan16"><input type="text" autocomplete="off" id="Gap16" onfocus="TrackFocus(16)" onblur="LeaveGap()" class="GapBox" size="9"/></span> across the world are trying to build democracies that are more multicultural than ever before. For these societies to thrive, citizens must <span class="GapSpan" id="GapSpan17"><input type="text" autocomplete="off" id="Gap17" onfocus="TrackFocus(17)" onblur="LeaveGap()" class="GapBox" size="6"/></span> able to see across race, ethnicity, and ideology. But currently, these skills are lacking. Black people feel that white people don&#x2019;t understand <span class="GapSpan" id="GapSpan18"><input type="text" autocomplete="off" id="Gap18" onfocus="TrackFocus(18)" onblur="LeaveGap()" class="GapBox" size="6"/></span> systemic inequalities they experience. People from rural communities feel that coastal communities dismiss and look down on them. The list goes on.<br /><span class="GapSpan" id="GapSpan19"><input type="text" autocomplete="off" id="Gap19" onfocus="TrackFocus(19)" onblur="LeaveGap()" class="GapBox" size="9"/></span> the frayed social fabric doesn&#x2019;t mean tackling all of these problems at once. Instead, it starts on the level of the individual. <span class="GapSpan" id="GapSpan20"><input type="text" autocomplete="off" id="Gap20" onfocus="TrackFocus(20)" onblur="LeaveGap()" class="GapBox" size="6"/></span> when we each improve our ability to see and understand others can we begin to slowly stitch back together the broader social <span class="GapSpan" id="GapSpan21"><input type="text" autocomplete="off" id="Gap21" onfocus="TrackFocus(21)" onblur="LeaveGap()" class="GapBox" size="6"/></span>.<br />Key idea 2<br />Stop diminishing, start illuminating<br />Have you ever been on, or witnessed, a first date where one of the people <span class="GapSpan" id="GapSpan22"><input type="text" autocomplete="off" id="Gap22" onfocus="TrackFocus(22)" onblur="LeaveGap()" class="GapBox" size="6"/></span> wouldn&#x2019;t shut up about themselves? Or sat near a restaurant table where everyone was staring at their phones instead of talking to <span class="GapSpan" id="GapSpan23"><input type="text" autocomplete="off" id="Gap23" onfocus="TrackFocus(23)" onblur="LeaveGap()" class="GapBox" size="6"/></span> other? <br />In each of these circumstances, at least one person is acting like a diminisher. Diminishers are those who make people feel <span class="GapSpan" id="GapSpan24"><input type="text" autocomplete="off" id="Gap24" onfocus="TrackFocus(24)" onblur="LeaveGap()" class="GapBox" size="6"/></span> and unseen. They&#x2019;re self-involved, they use other people as tools, and they rely on stereotypes to make judgments.<br />Diminishers&#x2019; positive counterparts are <span class="GapSpan" id="GapSpan25"><input type="text" autocomplete="off" id="Gap25" onfocus="TrackFocus(25)" onblur="LeaveGap()" class="GapBox" size="12"/></span>. Illuminators are persistently curious about others. They know how to ask the right questions at the right time. They lift people up <span class="GapSpan" id="GapSpan26"><input type="text" autocomplete="off" id="Gap26" onfocus="TrackFocus(26)" onblur="LeaveGap()" class="GapBox" size="6"/></span> make them feel respected, seen, and important.<br />The effects that illuminators can have on their environments are pretty concrete. An illustrative example <span class="GapSpan" id="GapSpan27"><input type="text" autocomplete="off" id="Gap27" onfocus="TrackFocus(27)" onblur="LeaveGap()" class="GapBox" size="6"/></span> from Bell Labs. Back in the early twentieth century, executives realized that some of their researchers were more productive and amassed far <span class="GapSpan" id="GapSpan28"><input type="text" autocomplete="off" id="Gap28" onfocus="TrackFocus(28)" onblur="LeaveGap()" class="GapBox" size="6"/></span> patents than others. They discovered that those researchers were the ones who frequently shared meals with Harry Nyquist, an electrical engineer. Nyquist, <span class="GapSpan" id="GapSpan29"><input type="text" autocomplete="off" id="Gap29" onfocus="TrackFocus(29)" onblur="LeaveGap()" class="GapBox" size="6"/></span> turned out, was an illuminator. He was so amazing at listening to his colleagues&#x2019; challenges and asking good questions that he was <span class="GapSpan" id="GapSpan30"><input type="text" autocomplete="off" id="Gap30" onfocus="TrackFocus(30)" onblur="LeaveGap()" class="GapBox" size="6"/></span> to bring out the very best in them. <br />Sadly, a lot of us tend to act more like diminishers than illuminators. We&#x2019;re <span class="GapSpan" id="GapSpan31"><input type="text" autocomplete="off" id="Gap31" onfocus="TrackFocus(31)" onblur="LeaveGap()" class="GapBox" size="6"/></span> eager to share our own opinions, stories, or points of view, making it hard for us to see those of others. Or <span class="GapSpan" id="GapSpan32"><input type="text" autocomplete="off" id="Gap32" onfocus="TrackFocus(32)" onblur="LeaveGap()" class="GapBox" size="6"/></span> spend our time caught up in anxiety over how we&#x2019;re coming across, making us unable to really listen.<br />Fortunately, the skill of <span class="GapSpan" id="GapSpan33"><input type="text" autocomplete="off" id="Gap33" onfocus="TrackFocus(33)" onblur="LeaveGap()" class="GapBox" size="12"/></span> is one that can be learned. <br />One way to adopt this gaze is to pretend &#x2013;&#x2060; even if you don&#x2019;t really believe <span class="GapSpan" id="GapSpan34"><input type="text" autocomplete="off" id="Gap34" onfocus="TrackFocus(34)" onblur="LeaveGap()" class="GapBox" size="6"/></span> &#x2013;&#x2060; that each person has a unique, immortal soul. Act as if every single person you encounter has something precious within them. <span class="GapSpan" id="GapSpan35"><input type="text" autocomplete="off" id="Gap35" onfocus="TrackFocus(35)" onblur="LeaveGap()" class="GapBox" size="6"/></span> you do, you&#x2019;re probably going to treat them well. You&#x2019;ll become warm, respectful, and admiring by default.<br />Illuminators look at other people <span class="GapSpan" id="GapSpan36"><input type="text" autocomplete="off" id="Gap36" onfocus="TrackFocus(36)" onblur="LeaveGap()" class="GapBox" size="6"/></span> extreme tenderness. Rembrandt paintings are great examples of this. When you see a portrait painted by Rembrandt, you see all of a <span class="GapSpan" id="GapSpan37"><input type="text" autocomplete="off" id="Gap37" onfocus="TrackFocus(37)" onblur="LeaveGap()" class="GapBox" size="6"/></span>&#x2019;s imperfections. But you also see their full humanity &#x2013;&#x2060; their depth, their complexity. Through Rembrandt&#x2019;s tender, illuminating gaze, an unremarkable person becomes <span class="GapSpan" id="GapSpan38"><input type="text" autocomplete="off" id="Gap38" onfocus="TrackFocus(38)" onblur="LeaveGap()" class="GapBox" size="13"/></span>.<br /><br />Bridging the gap<br />Even in the best of times, getting to know someone isn&#x2019;t easy. But here&#x2019;s the thing &#x2013;&#x2060; it&#x2019;s not <span class="GapSpan" id="GapSpan39"><input type="text" autocomplete="off" id="Gap39" onfocus="TrackFocus(39)" onblur="LeaveGap()" class="GapBox" size="6"/></span> best of times. In the United States, political animosities are running high and social isolation continues to grow. Many seem to have <span class="GapSpan" id="GapSpan40"><input type="text" autocomplete="off" id="Gap40" onfocus="TrackFocus(40)" onblur="LeaveGap()" class="GapBox" size="9"/></span> how to see and understand one another as human beings. <br />This has real, tangible effects. Suicide rates in America surged by 33 <span class="GapSpan" id="GapSpan41"><input type="text" autocomplete="off" id="Gap41" onfocus="TrackFocus(41)" onblur="LeaveGap()" class="GapBox" size="7"/></span> from 1999 to 2019. Between 1990 and 2020, the percentage of Americans who said they have no close friends quadrupled. Thirty-six percent <span class="GapSpan" id="GapSpan42"><input type="text" autocomplete="off" id="Gap42" onfocus="TrackFocus(42)" onblur="LeaveGap()" class="GapBox" size="6"/></span> Americans reported feeling lonely frequently or almost all of the time &#x2013;&#x2060; including 61 percent of young adults.<br />As a balm, many <span class="GapSpan" id="GapSpan43"><input type="text" autocomplete="off" id="Gap43" onfocus="TrackFocus(43)" onblur="LeaveGap()" class="GapBox" size="6"/></span> turn to politics. Partisan groups offer an easy solution: to belong by being suitably outraged toward those who disagree. But that&#x2019;s not <span class="GapSpan" id="GapSpan44"><input type="text" autocomplete="off" id="Gap44" onfocus="TrackFocus(44)" onblur="LeaveGap()" class="GapBox" size="6"/></span> connection or friendship &#x2013;&#x2060; it&#x2019;s just being agitated together. To bridge the divides that are tearing people apart, it&#x2019;s necessary to have <span class="GapSpan" id="GapSpan45"><input type="text" autocomplete="off" id="Gap45" onfocus="TrackFocus(45)" onblur="LeaveGap()" class="GapBox" size="6"/></span> hard conversations that ultimately lead to deeper connection.<br />Prior to entering any hard conversation, think about the context in which it&#x2019;s taking <span class="GapSpan" id="GapSpan46"><input type="text" autocomplete="off" id="Gap46" onfocus="TrackFocus(46)" onblur="LeaveGap()" class="GapBox" size="6"/></span>. For instance, as a well-educated professional, you might find it easy to walk into a conference at a nice hotel and be <span class="GapSpan" id="GapSpan47"><input type="text" autocomplete="off" id="Gap47" onfocus="TrackFocus(47)" onblur="LeaveGap()" class="GapBox" size="8"/></span>. It might not be as easy if you&#x2019;re a trucker from West Virginia. If you find yourself in a similar role to <span class="GapSpan" id="GapSpan48"><input type="text" autocomplete="off" id="Gap48" onfocus="TrackFocus(48)" onblur="LeaveGap()" class="GapBox" size="6"/></span> professional in this dynamic, show genuine curiosity about the truck driver and her work. Show her that it&#x2019;s OK for her to <span class="GapSpan" id="GapSpan49"><input type="text" autocomplete="off" id="Gap49" onfocus="TrackFocus(49)" onblur="LeaveGap()" class="GapBox" size="6"/></span> herself around you.<br />If someone starts talking about a time when they felt excluded, betrayed, or wronged, avoid the temptation to get <span class="GapSpan" id="GapSpan50"><input type="text" autocomplete="off" id="Gap50" onfocus="TrackFocus(50)" onblur="LeaveGap()" class="GapBox" size="9"/></span> or bring the conversation back to you. Instead, stop and listen. You might think that their pain is performative or exaggerated &#x2013;&#x2060; <span class="GapSpan" id="GapSpan51"><input type="text" autocomplete="off" id="Gap51" onfocus="TrackFocus(51)" onblur="LeaveGap()" class="GapBox" size="6"/></span> maybe you&#x2019;re right. But you should still stick with their frame and try to understand what their world looks like. <br />Say the <span class="GapSpan" id="GapSpan52"><input type="text" autocomplete="off" id="Gap52" onfocus="TrackFocus(52)" onblur="LeaveGap()" class="GapBox" size="12"/></span> has gone south regardless. In that case, you should take a step back and break the momentum. Try to figure out, together, <span class="GapSpan" id="GapSpan53"><input type="text" autocomplete="off" id="Gap53" onfocus="TrackFocus(53)" onblur="LeaveGap()" class="GapBox" size="6"/></span> things became so tense. Then, clarify your motives for the conversation and mutually reidentify its purpose. <br />You may never know what it&#x2019;s <span class="GapSpan" id="GapSpan54"><input type="text" autocomplete="off" id="Gap54" onfocus="TrackFocus(54)" onblur="LeaveGap()" class="GapBox" size="6"/></span> like to be another person &#x2013;&#x2060; to be of a different race, gender, generation, or ability. But if you work on your <span class="GapSpan" id="GapSpan55"><input type="text" autocomplete="off" id="Gap55" onfocus="TrackFocus(55)" onblur="LeaveGap()" class="GapBox" size="6"/></span> at having hard conversations, you can still get a sense of their perspective, slowly transforming wariness into trust.<br />Key idea 5<br />Seeing <span class="GapSpan" id="GapSpan56"><input type="text" autocomplete="off" id="Gap56" onfocus="TrackFocus(56)" onblur="LeaveGap()" class="GapBox" size="6"/></span> perspectives<br />Most people go about their lives assuming that what they see is the objective reality &#x2013;&#x2060; that everyone sees more or <span class="GapSpan" id="GapSpan57"><input type="text" autocomplete="off" id="Gap57" onfocus="TrackFocus(57)" onblur="LeaveGap()" class="GapBox" size="6"/></span> the same thing. In fact, countless studies prove that notion incorrect.<br />Consider research performed by Dennis Proffitt, a psychologist at the University <span class="GapSpan" id="GapSpan58"><input type="text" autocomplete="off" id="Gap58" onfocus="TrackFocus(58)" onblur="LeaveGap()" class="GapBox" size="6"/></span> Virginia. Proffitt asked different groups of students to estimate the grade of various hills around UVA&#x2019;s campus. Most participants considerably overestimated the <span class="GapSpan" id="GapSpan59"><input type="text" autocomplete="off" id="Gap59" onfocus="TrackFocus(59)" onblur="LeaveGap()" class="GapBox" size="6"/></span>. But one group was much more accurate &#x2013;&#x2060; members of UVA&#x2019;s women&#x2019;s varsity soccer team. The soccer players didn&#x2019;t see the hills <span class="GapSpan" id="GapSpan60"><input type="text" autocomplete="off" id="Gap60" onfocus="TrackFocus(60)" onblur="LeaveGap()" class="GapBox" size="6"/></span> being so steep because they were highly fit athletes who didn&#x2019;t struggle to walk up them. Similarly, people who recently consumed energy <span class="GapSpan" id="GapSpan61"><input type="text" autocomplete="off" id="Gap61" onfocus="TrackFocus(61)" onblur="LeaveGap()" class="GapBox" size="6"/></span> or listened to happy music saw fewer steep hills than those who hadn&#x2019;t.<br />What this shows is that people in different life <span class="GapSpan" id="GapSpan62"><input type="text" autocomplete="off" id="Gap62" onfocus="TrackFocus(62)" onblur="LeaveGap()" class="GapBox" size="13"/></span> literally see the world differently. Perception is shaped by a huge variety of factors, from our lifestyles to our personalities to our <span class="GapSpan" id="GapSpan63"><input type="text" autocomplete="off" id="Gap63" onfocus="TrackFocus(63)" onblur="LeaveGap()" class="GapBox" size="8"/></span>. Because of this, it&#x2019;s all the more important that we make an effort to see the world through other people&#x2019;s eyes. <br />When <span class="GapSpan" id="GapSpan64"><input type="text" autocomplete="off" id="Gap64" onfocus="TrackFocus(64)" onblur="LeaveGap()" class="GapBox" size="6"/></span>&#x2019;re trying to see another person, one important consideration you should make is how that person&#x2019;s culture and background have influenced the way <span class="GapSpan" id="GapSpan65"><input type="text" autocomplete="off" id="Gap65" onfocus="TrackFocus(65)" onblur="LeaveGap()" class="GapBox" size="6"/></span> think. David Brooks, for instance, is Jewish. Even though he doesn&#x2019;t attend synagogue or speak Hebrew, certain characteristics of the Jewish faith <span class="GapSpan" id="GapSpan66"><input type="text" autocomplete="off" id="Gap66" onfocus="TrackFocus(66)" onblur="LeaveGap()" class="GapBox" size="6"/></span> up in him &#x2013; for instance, a reverence for the written word and a sense of feeling &#x201C;homeless&#x201D; in the world.<br />Regardless <span class="GapSpan" id="GapSpan67"><input type="text" autocomplete="off" id="Gap67" onfocus="TrackFocus(67)" onblur="LeaveGap()" class="GapBox" size="6"/></span> whether you feel especially connected to your culture, it impacts the way you navigate the world. For example, what do you think <span class="GapSpan" id="GapSpan68"><input type="text" autocomplete="off" id="Gap68" onfocus="TrackFocus(68)" onblur="LeaveGap()" class="GapBox" size="6"/></span> the idea of lying under oath to help a friend? Ninety percent of people from the US and Canada find it unthinkable. <span class="GapSpan" id="GapSpan69"><input type="text" autocomplete="off" id="Gap69" onfocus="TrackFocus(69)" onblur="LeaveGap()" class="GapBox" size="7"/></span>, most people in Nepal, Venezuela, and South Korea consider it entirely acceptable!<br />So, when you&#x2019;re trying to see another person, you also <span class="GapSpan" id="GapSpan70"><input type="text" autocomplete="off" id="Gap70" onfocus="TrackFocus(70)" onblur="LeaveGap()" class="GapBox" size="6"/></span> to see how they&#x2019;ve been impacted by where they grew up, who their ancestors were, and how they embrace or reject their <span class="GapSpan" id="GapSpan71"><input type="text" autocomplete="off" id="Gap71" onfocus="TrackFocus(71)" onblur="LeaveGap()" class="GapBox" size="7"/></span>. By doing so, you&#x2019;re getting beyond stereotypes and lazy judgments, seeing other people in their entirety. <br />Key idea 6<br />Sitting with their <span class="GapSpan" id="GapSpan72"><input type="text" autocomplete="off" id="Gap72" onfocus="TrackFocus(72)" onblur="LeaveGap()" class="GapBox" size="9"/></span> <br />David Brooks&#x2019; closest friend, Pete, was an exuberant man. He had a cheerful disposition, a happy marriage, two wonderful sons, and a <span class="GapSpan" id="GapSpan73"><input type="text" autocomplete="off" id="Gap73" onfocus="TrackFocus(73)" onblur="LeaveGap()" class="GapBox" size="9"/></span> career as an eye surgeon. Out of everyone Brooks knew, Pete seemed like the least likely person to fall prey to depression. <span class="GapSpan" id="GapSpan74"><input type="text" autocomplete="off" id="Gap74" onfocus="TrackFocus(74)" onblur="LeaveGap()" class="GapBox" size="6"/></span> that&#x2019;s what happened. In April 2022, Pete succumbed to suicide. <br />Through his experience witnessing Pete&#x2019;s struggle, Brooks learned a lot of difficult <span class="GapSpan" id="GapSpan75"><input type="text" autocomplete="off" id="Gap75" onfocus="TrackFocus(75)" onblur="LeaveGap()" class="GapBox" size="7"/></span>. He made mistakes &#x2013; but eventually, he learned that supporting a depressed person doesn&#x2019;t mean trying to cheer them up. Instead, it <span class="GapSpan" id="GapSpan76"><input type="text" autocomplete="off" id="Gap76" onfocus="TrackFocus(76)" onblur="LeaveGap()" class="GapBox" size="6"/></span> acknowledging the reality of the situation and showing respect and love for that person regardless. It&#x2019;s staying present and making it clear <span class="GapSpan" id="GapSpan77"><input type="text" autocomplete="off" id="Gap77" onfocus="TrackFocus(77)" onblur="LeaveGap()" class="GapBox" size="6"/></span> haven&#x2019;t given up on them, sending little notes or emails to let them know they&#x2019;re on your mind. <br />This approach is grounded <span class="GapSpan" id="GapSpan78"><input type="text" autocomplete="off" id="Gap78" onfocus="TrackFocus(78)" onblur="LeaveGap()" class="GapBox" size="6"/></span> empathy. A lot of people think of empathy as an emotion, but it&#x2019;s actually a skill you can cultivate. It&#x2019;s a vital <span class="GapSpan" id="GapSpan79"><input type="text" autocomplete="off" id="Gap79" onfocus="TrackFocus(79)" onblur="LeaveGap()" class="GapBox" size="6"/></span> of seeing and knowing others when they&#x2019;re suffering, regardless of the severity of their condition.<br />One key empathy skill is mentalizing &#x2013;&#x2060; <span class="GapSpan" id="GapSpan80"><input type="text" autocomplete="off" id="Gap80" onfocus="TrackFocus(80)" onblur="LeaveGap()" class="GapBox" size="6"/></span> is, figuring out why someone might be experiencing a particular emotion. Mentalizing helps us see others&#x2019; emotional states in all their complexity. <span class="GapSpan" id="GapSpan81"><input type="text" autocomplete="off" id="Gap81" onfocus="TrackFocus(81)" onblur="LeaveGap()" class="GapBox" size="6"/></span> example, if you see someone on their first day on the job, it might take you back in time to your own <span class="GapSpan" id="GapSpan82"><input type="text" autocomplete="off" id="Gap82" onfocus="TrackFocus(82)" onblur="LeaveGap()" class="GapBox" size="6"/></span> day. This will help you notice their blend of emotions: their excitement about starting a new chapter in their life, their nervousness <span class="GapSpan" id="GapSpan83"><input type="text" autocomplete="off" id="Gap83" onfocus="TrackFocus(83)" onblur="LeaveGap()" class="GapBox" size="6"/></span> meeting so many new people, and their anxiety about performing well. <br />Another key empathy skill is caring. This involves getting out of <span class="GapSpan" id="GapSpan84"><input type="text" autocomplete="off" id="Gap84" onfocus="TrackFocus(84)" onblur="LeaveGap()" class="GapBox" size="6"/></span> own experiences and understanding that what you need in the moment may be very different from what another person would need in <span class="GapSpan" id="GapSpan85"><input type="text" autocomplete="off" id="Gap85" onfocus="TrackFocus(85)" onblur="LeaveGap()" class="GapBox" size="6"/></span> same situation. Say you&#x2019;re with someone who&#x2019;s having an anxiety attack. If that were you, you might want a glass of wine. <span class="GapSpan" id="GapSpan86"><input type="text" autocomplete="off" id="Gap86" onfocus="TrackFocus(86)" onblur="LeaveGap()" class="GapBox" size="6"/></span> that might be the last thing the other person wants. Instead, they might want you to hold their hand while they do <span class="GapSpan" id="GapSpan87"><input type="text" autocomplete="off" id="Gap87" onfocus="TrackFocus(87)" onblur="LeaveGap()" class="GapBox" size="9"/></span> exercises. This might feel awkward, but you do it anyway because you&#x2019;re practicing empathy. <br />Empathetic people are sorely needed in the world. <span class="GapSpan" id="GapSpan88"><input type="text" autocomplete="off" id="Gap88" onfocus="TrackFocus(88)" onblur="LeaveGap()" class="GapBox" size="6"/></span> many people are walking around with a deep-seated sense of fear and hurt, and they need someone to show them that isn&#x2019;t <span class="GapSpan" id="GapSpan89"><input type="text" autocomplete="off" id="Gap89" onfocus="TrackFocus(89)" onblur="LeaveGap()" class="GapBox" size="6"/></span> only way. By cultivating empathy, we make the world a more open, caring, happier place.<br />Final summary<br />To truly understand another person <span class="GapSpan" id="GapSpan90"><input type="text" autocomplete="off" id="Gap90" onfocus="TrackFocus(90)" onblur="LeaveGap()" class="GapBox" size="8"/></span> you to look past your assumptions, perspectives, and narratives in order to see and hear their own. Each person is a deep <span class="GapSpan" id="GapSpan91"><input type="text" autocomplete="off" id="Gap91" onfocus="TrackFocus(91)" onblur="LeaveGap()" class="GapBox" size="6"/></span> of complexity, and their unique perspective is shaped by family background, life experiences, cultural context, and countless other factors. It&#x2019;s important to <span class="GapSpan" id="GapSpan92"><input type="text" autocomplete="off" id="Gap92" onfocus="TrackFocus(92)" onblur="LeaveGap()" class="GapBox" size="6"/></span> these into account when speaking with people, making sure to maintain an investigative, curious mindset and ask questions that give them an <span class="GapSpan" id="GapSpan93"><input type="text" autocomplete="off" id="Gap93" onfocus="TrackFocus(93)" onblur="LeaveGap()" class="GapBox" size="11"/></span> to voice their stories and points of view.<br />
</div>
</form>
</div>



<button id="CheckButton2" class="FuncButton" onclick="CheckAnswers()">&#160;Check&#160;</button>


<button class="FuncButton" onclick="ShowHint()">&#160;Hint&#160;</button>


</div>

</div>


<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&#160;OK&#160;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">


<button class="NavButton" onclick="location='https://myfluentenglish.weebly.com/resources'; return false;"> More Fluent English Resources </button>

<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
